package org.bste.euler

import scala.annotation.tailrec

object EvenFibonacci {

  /*Each new term in the Fibonacci sequence is generated by adding the previous two terms.
   * By starting with 1 and 2, the first 10 terms will be:
   * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
   * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
   * find the sum of the even-valued terms.
   */

  def main(args: Array[String]) = {

    val fibs = fibUntil(40)
    println(fibs)
  }

  def fibUntil(limit: Int) = {

    @tailrec
    def helper(current :Int , prev: BigInt = 0, next: BigInt = 1): BigInt = current match {
      case 0 => prev
      case 1 => next
      case _ => helper(current -1, next, next + prev)
    }

    helper(limit)
  }
}
